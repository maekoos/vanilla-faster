// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repository

import (
	"context"
)

const getCategory = `-- name: GetCategory :many
SELECT categories.slug, categories.name, categories.collection_id, categories.image_url, subcollections.id, subcollections.name, subcollections.category_slug, subcategories.slug, subcategories.name, subcategories.subcollection_id, subcategories.image_url FROM categories
LEFT JOIN subcollections ON subcollections.category_slug=categories.slug
LEFT JOIN subcategories ON subcategories.subcollection_id=subcollections.id
WHERE categories.slug=$1
`

type GetCategoryRow struct {
	Category      Category      `json:"category"`
	Subcollection Subcollection `json:"subcollection"`
	Subcategory   Subcategory   `json:"subcategory"`
}

func (q *Queries) GetCategory(ctx context.Context, slug string) ([]GetCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategory, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoryRow{}
	for rows.Next() {
		var i GetCategoryRow
		if err := rows.Scan(
			&i.Category.Slug,
			&i.Category.Name,
			&i.Category.CollectionID,
			&i.Category.ImageUrl,
			&i.Subcollection.ID,
			&i.Subcollection.Name,
			&i.Subcollection.CategorySlug,
			&i.Subcategory.Slug,
			&i.Subcategory.Name,
			&i.Subcategory.SubcollectionID,
			&i.Subcategory.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryProductCount = `-- name: GetCategoryProductCount :one
SELECT count(*) FROM categories
LEFT JOIN subcollections ON categories.slug = subcollections.category_slug
LEFT JOIN subcategories ON subcollections.id = subcategories.subcollection_id
LEFT JOIN products ON subcategories.slug = products.subcategory_slug
WHERE categories.slug=$1
`

func (q *Queries) GetCategoryProductCount(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCategoryProductCount, slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCollectionDetails = `-- name: GetCollectionDetails :many
SELECT collections.id, collections.name, collections.slug, categories.slug, categories.name, categories.collection_id, categories.image_url FROM collections
LEFT JOIN categories ON categories.collection_id = collections.id
WHERE collections.slug=$1
ORDER BY collections.slug asc
`

type GetCollectionDetailsRow struct {
	Collection Collection `json:"collection"`
	Category   Category   `json:"category"`
}

func (q *Queries) GetCollectionDetails(ctx context.Context, slug string) ([]GetCollectionDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionDetails, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCollectionDetailsRow{}
	for rows.Next() {
		var i GetCollectionDetailsRow
		if err := rows.Scan(
			&i.Collection.ID,
			&i.Collection.Name,
			&i.Collection.Slug,
			&i.Category.Slug,
			&i.Category.Name,
			&i.Category.CollectionID,
			&i.Category.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollections = `-- name: GetCollections :many
SELECT id, name, slug FROM collections
ORDER BY collections.name
`

func (q *Queries) GetCollections(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionsWithCategories = `-- name: GetCollectionsWithCategories :many
SELECT collections.id, collections.name, collections.slug, categories.slug, categories.name, categories.collection_id, categories.image_url FROM collections
LEFT JOIN categories ON categories.collection_id=collections.id
ORDER BY collections.name, categories.name
`

type GetCollectionsWithCategoriesRow struct {
	Collection Collection `json:"collection"`
	Category   Category   `json:"category"`
}

func (q *Queries) GetCollectionsWithCategories(ctx context.Context) ([]GetCollectionsWithCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionsWithCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCollectionsWithCategoriesRow{}
	for rows.Next() {
		var i GetCollectionsWithCategoriesRow
		if err := rows.Scan(
			&i.Collection.ID,
			&i.Collection.Name,
			&i.Collection.Slug,
			&i.Category.Slug,
			&i.Category.Name,
			&i.Category.CollectionID,
			&i.Category.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCount = `-- name: GetProductCount :one


SELECT count(*) as total FROM products
`

// with: {
// categories: true,
// },
func (q *Queries) GetProductCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProductCount)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getProductDetails = `-- name: GetProductDetails :one
SELECT slug, name, description, price, subcategory_slug, image_url FROM products
WHERE slug=$1
`

func (q *Queries) GetProductDetails(ctx context.Context, slug string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductDetails, slug)
	var i Product
	err := row.Scan(
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.SubcategorySlug,
		&i.ImageUrl,
	)
	return i, err
}

const getProductsForSubcategory = `-- name: GetProductsForSubcategory :many
SELECT slug, name, description, price, subcategory_slug, image_url FROM products
WHERE subcategory_slug=$1
ORDER BY slug asc
`

func (q *Queries) GetProductsForSubcategory(ctx context.Context, subcategorySlug string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsForSubcategory, subcategorySlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Slug,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.SubcategorySlug,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubcategory = `-- name: GetSubcategory :one
SELECT slug, name, subcollection_id, image_url FROM subcategories
WHERE slug=$1
`

func (q *Queries) GetSubcategory(ctx context.Context, slug string) (Subcategory, error) {
	row := q.db.QueryRowContext(ctx, getSubcategory, slug)
	var i Subcategory
	err := row.Scan(
		&i.Slug,
		&i.Name,
		&i.SubcollectionID,
		&i.ImageUrl,
	)
	return i, err
}

const getSubcategoryProductCount = `-- name: GetSubcategoryProductCount :one
SELECT count(*) FROM products
WHERE products.subcategory_slug=$1
`

func (q *Queries) GetSubcategoryProductCount(ctx context.Context, subcategorySlug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSubcategoryProductCount, subcategorySlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}
